#AoC day_10
import numpy as np, math



#input
def input_from_file(file):
    lines = [np.array([['' for _ in range(140)] for _ in range(140)])]
    with open(file) as f:
        for i, line in enumerate(f.readlines()):
            lines[0][:, i] = list(line.strip())
            for j, c in enumerate(line):
                if c == 'S': lines.append((j, i))
        f.close()
    return lines
    

#part_1
def calc_steps_to_farthest_point(layout, start):
    steps, prev, start_check = 1, start, ((start[0] + 1, start[1]), (start[0], start[1] + 1), (start[0] - 1, start[1]), (start[0], start[1] - 1))
    for i, pos in enumerate(start_check):
        if((i == 0 and any(layout[pos] == c for c in ('-', 'J', '7'))) or (i == 1 and any(layout[pos] == c for c in ('|', 'L', 'J')))
        or (i == 2 and any(layout[pos] == c for c in ('-', 'F', 'L'))) or (i == 3 and any(layout[pos] == c for c in ('|', '7', 'F')))): cur = pos
    print(prev, cur)
    while layout[cur] != 'S':
        print(prev, cur)
        save_prev = prev
        prev, cur = get_next_pos(layout, prev, cur)
        layout[prev] = "0"
        steps += 1
    return math.ceil(steps / 2)

def get_next_pos(layout, prev, cur):
    if layout[cur] == '|' and cur[1] - prev[1] > 0: return cur, (cur[0], cur[1] + 1)
    if layout[cur] == '|' and prev[1] - cur[1] > 0: return cur, (cur[0], cur[1] - 1)
    if layout[cur] == '-' and cur[0] - prev[0] > 0: return cur, (cur[0] + 1, cur[1])
    if layout[cur] == '-' and prev[0] - cur[0] > 0: return cur, (cur[0] - 1, cur[1])
    if layout[cur] == 'L' and cur[1] - prev[1] > 0: return cur, (cur[0] + 1, cur[1])
    if layout[cur] == 'L' and prev[0] - cur[0] > 0: return cur, (cur[0], cur[1] - 1)
    if layout[cur] == 'J' and cur[1] - prev[1] > 0: return cur, (cur[0] - 1, cur[1])
    if layout[cur] == 'J' and cur[0] - prev[0] > 0: return cur, (cur[0], cur[1] - 1)
    if layout[cur] == '7' and prev[1] - cur[1] > 0: return cur, (cur[0] - 1, cur[1])
    if layout[cur] == '7' and cur[0] - prev[0] > 0: return cur, (cur[0], cur[1] + 1)
    if layout[cur] == 'F' and prev[1] - cur[1] > 0: return cur, (cur[0] + 1, cur[1])
    if layout[cur] == 'F' and prev[0] - cur[0] > 0: return cur, (cur[0], cur[1] + 1)


#main
if __name__ == '__main__':
    layout, start = input_from_file("day_10/input.txt")
    print(calc_steps_to_farthest_point(layout, start))
